---
title: "Coding"
format: html
---

Importing libraries used
```{python}
import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt 
import seaborn as sns
```

Importing Dataset used
```{python}
df = pd.read_csv('pokemon_data.csv')
```

Cleaning Dataset used 
```{python}
df_c = pd.DataFrame(
    # Removing duplicate rows
    df.drop_duplicates()
    # removing empty rows 
    .dropna(how='all')
    # Removing specific columns 
    .drop(columns=[])
    .reset_index(drop=True)
)

# Renaming column titles: replacing _ with spaces and capitalising each word
df_c.columns = df_c.columns.str.replace('_', ' ').str.title()
# Capitalising 'Id' and 'Hp' column title, saving changes
df_c.rename(columns={'Id':'ID', 'Hp':'HP', 'Sp. Attack': 'Special Attack', 'Sp. Defense':'Special Defense'}, inplace=True)
```

## Creating parallel bar plot comparing HP, Attack, Special Attack, Defense, Special Defense, Speed on average across pokemon types. ## 
```{python}
# Creating new dataframe using only columns needed 
df_stats = df_c[['HP', 'Attack', 'Special Attack', 'Defense', 'Special Defense', 'Speed', 'Base Stats', 'Type 1']]

type_order = df_stats['Type 1'].unique()

# Group by 'Type 1' and calculate mean of all stats
plot_df_stats = df_stats.groupby('Type 1').mean(numeric_only=True).reset_index()

# Order by custom type order
plot_df_ordered = plot_df_stats.set_index('Type 1').loc[type_order].reset_index()

overall_averages = plot_df_stats[all_stats].mean()

```

```{python}
# Plotting parallel bar chart to compare stats across types of pokemon

# importing Line2D to create line for legend
from matplotlib.lines import Line2D

# Stats setup
all_stats = ['HP', 'Attack', 'Special Attack', 'Speed', 'Defense', 'Special Defense']

impact_font = {'fontname':'Impact'}
verdana_font = {'fontname': 'Verdana'}

# Plot figure
fig = plt.figure(figsize=(18, 16))
# Adding title: chnaging font, size, and position
fig.suptitle('Pokémon Stats by Type', **impact_font, size=25, y=0.76)

# Create custom line for the legend
avg_line = Line2D([0], [0], color='#419EAE', linestyle='--', linewidth=1.5, label='Average')

# Add legend to plot
fig.legend(handles=[avg_line], loc='upper right', fontsize=10, bbox_to_anchor=(0.11, 0.75), frameon=False)

# Plotting graphs for individual stats
# Creating loop to plot all charts
for i, stat in enumerate(all_stats):
    row = 1 + i // 3
    col = i % 3
    ax = plt.subplot2grid((4, 3), (row, col))
    
    values = plot_df_ordered.set_index('Type 1')[stat]
    
    # Customise charts
    ax.barh(type_order, values, color='#FAAA6D')
    ax.set_title(f'{stat}', fontsize=15, **verdana_font)
    ax.invert_yaxis()
    ax.grid(axis='x', linestyle='--', alpha=0.6)
    ax.axvline(overall_averages[stat], color='#419EAE', linestyle='--', linewidth=1.5)

    # For the first column in each row, show y-ticks with the Pokémon types
    if col == 0:
        ax.set_yticks(range(len(type_order)))
        ax.set_yticklabels(type_order, fontsize=11, **verdana_font)
    
    # For other columns, hide the y-ticks (type)
    else: 
        ax.set_yticks([])

# Printing plot
plt.tight_layout()
plt.show()


```

impact of individual stats on base stats
```{python}
# Set up the subplot grid (2 rows x 3 columns)
fig, axes = plt.subplots(2, 3, figsize=(18, 10))
# Flatten so we can loop easily
axes = axes.flatten()
fig.suptitle('Impact of Individual Stats on Base Stats', **impact_font, size=25, y=0.985)

# Loop through each stat and plot on its own subplot
for idx, stat in enumerate(all_stats):
    ax = axes[idx]
    
    # Scatter plot
    ax.scatter(df_c[stat], df_c['Base Stats'], alpha=0.5)
    
    # Calculate and add line of best fit
    m, b = np.polyfit(df_c[stat], df_c['Base Stats'], 1)
    ax.plot(df_c[stat], m * df_c[stat] + b, color='red')
    
    # Customise each subplot
    ax.set_xlabel(stat, fontsize=11, **verdana_font)
    ax.set_title(f'Impact of {stat} on Base Stats', fontsize=15, **verdana_font)
    ax.tick_params(axis='both', which='major', labelsize=9)

    # Calculate R²
    tss = np.sum((y - np.mean(y))**2)
    rss = np.sum((y - y_pred)**2)
    r_squared = 1 - (rss / tss)

    # Add title and R² value inside the plot
    ax.set_title(f'{stat} vs Base Stats\n$R^2$ = {r_squared:.2f}', fontsize=12)
    ax.set_xlabel(stat, fontsize=10)
    ax.tick_params(axis='both', which='major', labelsize=9)
    
    # Add slope and intercept as a text inside the plot
    textstr = f"Slope: {m:.2f}\nIntercept: {b:.2f}"
    ax.text(0.02, 0.98, textstr, transform=ax.transAxes,
            fontsize=9, verticalalignment='top', **verdana_font)

# Adjust layout and print
plt.tight_layout()
plt.show()

```

modelling capture rate 
```{python}

# Define X (what is influeincing y) and y (the outcome/what is impacted by X)
X = df_c[['Base Stats', 'Is Legendary', 'Egg Cycles', 'Number Normal', 'Number Super Effective']] 
y = df_c['Capturing Rate']

# Train/test split, random state set to 42 (ensures fixed data set and reproducability)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model
model = LinearRegression()
model.fit(X_train, y_train)

# Coefficients
print(f"Intercept: {model.intercept_}")
print(f"Base Stats Coefficient: {model.coef_[0]}")
print(f"Legendary Coefficient: {model.coef_[1]}")
print(f"Egg Cycles Coefficient: {model.coef_[2]}")
print(f"Number Normal: {model.coef_[3]}")
print(f"Number Super Effective: {model.coef_[4]}")

# R² score
print(f"R² score: {model.score(X_test, y_test)}")

```

Intercept: 233.8375867625524
Attack Coefficient: -0.8912525469406004
HP Coefficient: -0.8549620513421569
Legendary Coefficient: -23.37949424610949
Egg Steps Coefficient: -0.00133851543751614
R² score: 0.2865070515289072

impact of base stats on capture rate

```{python}
# Define X (what is influeincing y) and y (the outcome/what is impacted by X)
X2 = df_c[['Base Stats']]   
y2 = df_c['Capturing Rate']

# Train/test split
X2_train, X2_test, y2_train, y2_test = train_test_split(X2, y2, test_size=0.2, random_state=42)

# Model
model = LinearRegression()
model.fit(X2_train, y2_train)

# Coefficients
print(f"Intercept: {model.intercept_}")
print(f"Base Stats Coefficient: {model.coef_[0]}")

# R² score
print(f"R² score: {model.score(X2_test, y2_test)}")
```

Intercept: 313.1090355486016
Base Stats Coefficient: -0.5109640001311458
R² score: 0.44456748480008246

```{python}
# Define X (what is influeincing y) and y (the outcome/what is impacted by X)
X = df_c[['Egg Cycles', 'Is Legendary']]   
y = df_c['Base Stats'] 

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model
model = LinearRegression()
model.fit(X_train, y_train)

# Coefficients
print(f"Intercept: {model.intercept_}")
print(f"Egg Steps Coefficient: {model.coef_[0]} for every step, {model.coef_[0]*1000} for every 1000 steps required to hatch the egg")

# R² score
print(f"R² score: {model.score(X_test, y_test)}")

```

Intercept: 122.53966361352428
Egg Steps Coefficient: -0.004077861607185263 for every step, -4.077861607185263 for every 1000 steps required to hatch the egg
R² score: 0.10790633898266933

```{python}
# Define X (what is influeincing y) and y (the outcome/what is impacted by X)
X = df_c[['Number Immune', 'Number Not Effective', 'Number Normal', 'Number Super Effective']]   
y = df_c['Base Stats'] 

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model
model = LinearRegression()
model.fit(X_train, y_train)

# Coefficients
print(f"Intercept: {model.intercept_}")
print(f"Number Immune Coefficient: {model.coef_[0]}")
print(f"Number Not Effective Coefficient: {model.coef_[1]}")
print(f"Number Normal Coefficient: {model.coef_[2]}")
print(f"Number Super Effective Coefficient: {model.coef_[3]}")

# R² score
print(f"R² score: {model.score(X_test, y_test)}")
```



Spider plots of average of each generation of pokemon (1-9)

how stat types change through the generations (do they get stronger?)

predict legendary and mythical status based on stats 

```{python}
df_c['Base Stats'].mean()
```